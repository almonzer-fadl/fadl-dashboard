// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  avatarUrl    String?  @map("avatar_url")
  preferences  Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  projects     Project[]
  tasks        Task[]
  notes        Note[]
  files        File[]
  analytics    Analytics[]
  sessions     Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  name        String
  description String?
  status      String    @default("active")
  priority    String    @default("medium")
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("projects")
}

model Task {
  id          String    @id @default(uuid())
  projectId   String?   @map("project_id")
  userId      String    @map("user_id")
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime? @map("due_date")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  project      Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  dependencies TaskDependency[]   @relation("TaskDependencies")
  dependents   TaskDependency[]   @relation("DependentTasks")

  @@map("tasks")
}

model TaskDependency {
  id              String @id @default(uuid())
  taskId          String @map("task_id")
  dependsOnTaskId String @map("depends_on_task_id")
  type            String // 'blocks', 'blocked_by', 'related'
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  task          Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask Task @relation("DependentTasks", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@map("task_dependencies")
}

model Note {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  content   String
  tags      String[] @default([])
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model File {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  filename     String
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  size         BigInt
  path         String
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Analytics {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  metricName  String   @map("metric_name")
  metricValue Float    @map("metric_value")
  timestamp   DateTime @default(now())
  metadata    Json     @default("{}")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}
